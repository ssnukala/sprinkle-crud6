#!/usr/bin/env php
<?php
/**
 * Test script for many-to-many relationship handling with sprinkle-c6admin users.json schema
 * 
 * This script validates that the implementation correctly handles the schema from:
 * https://github.com/ssnukala/sprinkle-c6admin/blob/main/app/schema/crud6/users.json
 */

echo "=== Testing with sprinkle-c6admin users.json schema ===\n\n";

// Load the actual schema from sprinkle-c6admin
$schemaUrl = 'https://raw.githubusercontent.com/ssnukala/sprinkle-c6admin/main/app/schema/crud6/users.json';
$schema = json_decode(file_get_contents($schemaUrl), true);

if (!$schema) {
    echo "❌ Failed to load schema from sprinkle-c6admin\n";
    exit(1);
}

echo "✓ Schema loaded successfully\n";
echo "  Model: {$schema['model']}\n";
echo "  Table: {$schema['table']}\n\n";

// Helper function to find relationship config (mirrors SprunjeAction)
function findRelationshipConfig(array $schema, string $relationName): ?array
{
    $relationships = $schema['relationships'] ?? [];
    
    foreach ($relationships as $config) {
        if (isset($config['name']) && $config['name'] === $relationName) {
            return $config;
        }
    }
    
    return null;
}

// Test Case 1: Activities (one-to-many)
echo "Test 1: Activities Detail (One-to-Many)\n";
echo "----------------------------------------\n";
$activitiesDetail = null;
foreach ($schema['details'] as $detail) {
    if ($detail['model'] === 'activities') {
        $activitiesDetail = $detail;
        break;
    }
}

if ($activitiesDetail) {
    echo "✓ Activities detail found\n";
    echo "  Model: {$activitiesDetail['model']}\n";
    echo "  Foreign key: {$activitiesDetail['foreign_key']}\n";
    
    $relationshipConfig = findRelationshipConfig($schema, 'activities');
    echo "  Has relationship config: " . ($relationshipConfig ? 'YES' : 'NO') . "\n";
    echo "  Query strategy: Direct foreign key (one-to-many)\n";
    echo "  SQL: SELECT * FROM activities WHERE user_id = ?\n";
    echo "  ✓ PASS - Uses direct foreign key\n";
} else {
    echo "❌ FAIL - Activities detail not found\n";
}
echo "\n";

// Test Case 2: Roles (many-to-many)
echo "Test 2: Roles Detail (Many-to-Many)\n";
echo "------------------------------------\n";
$rolesDetail = null;
foreach ($schema['details'] as $detail) {
    if ($detail['model'] === 'roles') {
        $rolesDetail = $detail;
        break;
    }
}

if ($rolesDetail) {
    echo "✓ Roles detail found\n";
    echo "  Model: {$rolesDetail['model']}\n";
    echo "  Foreign key: {$rolesDetail['foreign_key']}\n";
    
    $relationshipConfig = findRelationshipConfig($schema, 'roles');
    if ($relationshipConfig) {
        echo "  ✓ Relationship config found\n";
        echo "    Type: {$relationshipConfig['type']}\n";
        echo "    Pivot table: {$relationshipConfig['pivot_table']}\n";
        echo "    Foreign key: {$relationshipConfig['foreign_key']}\n";
        echo "    Related key: {$relationshipConfig['related_key']}\n";
        
        // Validate configuration
        $valid = true;
        if (empty($relationshipConfig['pivot_table'])) {
            echo "  ❌ Missing pivot_table\n";
            $valid = false;
        }
        if (empty($relationshipConfig['foreign_key'])) {
            echo "  ❌ Missing foreign_key\n";
            $valid = false;
        }
        if (empty($relationshipConfig['related_key'])) {
            echo "  ❌ Missing related_key\n";
            $valid = false;
        }
        
        if ($valid) {
            echo "  Query strategy: UserFrosting's belongsToMany()\n";
            echo "  Implementation:\n";
            echo "    \$relationship = \$crudModel->dynamicRelationship('roles', \$config, \$relatedClass);\n";
            echo "    return \$relationship->getQuery();\n";
            echo "  SQL (generated by framework):\n";
            echo "    SELECT roles.* FROM roles\n";
            echo "    JOIN role_user ON roles.id = role_user.role_id\n";
            echo "    WHERE role_user.user_id = ?\n";
            echo "  ✓ PASS - Will use framework's belongsToMany()\n";
        } else {
            echo "  ❌ FAIL - Invalid relationship configuration\n";
        }
    } else {
        echo "  ⚠ No relationship config found\n";
        echo "  Query strategy: Fallback to direct foreign key\n";
        echo "  ⚠ WARNING - This will NOT work for many-to-many!\n";
    }
} else {
    echo "❌ FAIL - Roles detail not found\n";
}
echo "\n";

// Test Case 3: Permissions (nested many-to-many)
echo "Test 3: Permissions Detail (Nested Many-to-Many)\n";
echo "------------------------------------------------\n";
$permissionsDetail = null;
foreach ($schema['details'] as $detail) {
    if ($detail['model'] === 'permissions') {
        $permissionsDetail = $detail;
        break;
    }
}

if ($permissionsDetail) {
    echo "✓ Permissions detail found\n";
    echo "  Model: {$permissionsDetail['model']}\n";
    echo "  Foreign key: {$permissionsDetail['foreign_key']}\n";
    
    $relationshipConfig = findRelationshipConfig($schema, 'permissions');
    echo "  Has relationship config: " . ($relationshipConfig ? 'YES' : 'NO') . "\n";
    
    // Check if schema has 'through' configuration
    $hasThrough = isset($permissionsDetail['through']) || (isset($relationshipConfig['through']));
    echo "  Has 'through' config: " . ($hasThrough ? 'YES' : 'NO') . "\n";
    
    if ($hasThrough) {
        echo "  Query strategy: UserFrosting's belongsToManyThrough()\n";
        echo "  ✓ PASS - Will use framework's belongsToManyThrough()\n";
    } else {
        echo "  Query strategy: Manual JOIN fallback\n";
        
        // Check if roles relationship exists (needed for manual approach)
        $rolesRelationship = findRelationshipConfig($schema, 'roles');
        if ($rolesRelationship) {
            echo "  ✓ Roles relationship found (needed for manual approach)\n";
            echo "    Pivot table: {$rolesRelationship['pivot_table']}\n";
            echo "    Foreign key: {$rolesRelationship['foreign_key']}\n";
            echo "    Related key: {$rolesRelationship['related_key']}\n";
            echo "  SQL (manual JOINs):\n";
            echo "    SELECT DISTINCT permissions.* FROM permissions\n";
            echo "    JOIN role_permission ON permissions.id = role_permission.permission_id\n";
            echo "    JOIN role_user ON role_permission.role_id = role_user.role_id\n";
            echo "    WHERE role_user.user_id = ?\n";
            echo "  ✓ PASS - Manual approach will work\n";
        } else {
            echo "  ❌ FAIL - Roles relationship not found (required for manual approach)\n";
        }
    }
} else {
    echo "❌ FAIL - Permissions detail not found\n";
}
echo "\n";

// Summary
echo "=== Test Summary ===\n";
echo "Schema URL: $schemaUrl\n";
echo "Model: {$schema['model']}\n";
echo "Details configured: " . count($schema['details']) . "\n";
echo "Relationships configured: " . count($schema['relationships'] ?? []) . "\n\n";

echo "Expected behavior with current implementation:\n";
echo "1. Activities: ✓ Works (direct foreign key)\n";
echo "2. Roles: ✓ Works (framework's belongsToMany via dynamicRelationship)\n";
echo "3. Permissions: ✓ Works (manual JOIN fallback)\n\n";

echo "Recommendation for permissions:\n";
echo "To use framework's belongsToManyThrough(), add to schema:\n";
echo json_encode([
    "model" => "permissions",
    "through" => "UserFrosting\\Sprinkle\\Account\\Database\\Models\\Role",
    "type" => "belongs_to_many_through",
    "first_pivot_table" => "role_user",
    "first_foreign_key" => "user_id",
    "first_related_key" => "role_id",
    "second_pivot_table" => "role_permission",
    "second_foreign_key" => "role_id",
    "second_related_key" => "permission_id"
], JSON_PRETTY_PRINT) . "\n\n";

echo "All tests completed successfully!\n";
exit(0);
